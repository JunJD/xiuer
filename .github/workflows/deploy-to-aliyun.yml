name: Deploy to Aliyun Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ALIYUN_REGISTRY_URL }}
          username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          file: ./fastapi_backend/Dockerfile
          push: true
          tags: ${{ secrets.ALIYUN_REGISTRY_URL }}/xiuer_2/backend:${{ github.sha }}, ${{ secrets.ALIYUN_REGISTRY_URL }}/xiuer_2/backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./nextjs-frontend
          file: ./nextjs-frontend/Dockerfile
          push: true
          tags: ${{ secrets.ALIYUN_REGISTRY_URL }}/xiuer_2/frontend:${{ github.sha }}, ${{ secrets.ALIYUN_REGISTRY_URL }}/xiuer_2/frontend:latest
          build-args: |
            API_BASE_URL=http://backend:8000

      - name: Read and Base64-encode Nginx configuration
        id: nginx_config
        run: echo "NGINX_CONFIG_B64=$(base64 -w 0 config/nginx/nginx.conf)" >> $GITHUB_ENV

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_SSH_KEY }}
          script: |
            echo "Creating project directory..."
            mkdir -p /app/xiuer
            cd /app/xiuer
            
            echo "Creating .env file..."
            cat <<EOF > .env
            # General
            COMPOSE_PROFILES=prod
            ALIYUN_REGISTRY_URL=${{ secrets.ALIYUN_REGISTRY_URL }}
            ALIYUN_NAMESPACE=xiuer_2
            # Database credentials
            POSTGRES_USER=${{ secrets.DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.DB_NAME }}
            # JWT Secret
            ACCESS_SECRET_KEY=${{ secrets.ACCESS_SECRET_KEY }}
            RESET_PASSWORD_SECRET_KEY=${{ secrets.RESET_PASSWORD_SECRET_KEY }}
            VERIFICATION_SECRET_KEY=${{ secrets.VERIFICATION_SECRET_KEY }}
            # App settings
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
            # Github
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            GITHUB_REPO_OWNER=JunJD
            GITHUB_REPO_NAME=xiuer-spider
            GITHUB_WORKFLOW_ID=170912099
            EOF
            
            echo "Copying Nginx configuration..."
            mkdir -p ./nginx
            echo "${{ env.NGINX_CONFIG_B64 }}" | base64 --decode > ./nginx/default.conf

            echo "Creating docker-compose.prod.yml..."
            cat <<EOF > docker-compose.prod.yml
            services:
              db:
                image: postgres:latest
                restart: always
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                environment:
                  - POSTGRES_USER=\${POSTGRES_USER}
                  - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
                  - POSTGRES_DB=\${POSTGRES_DB}
                networks:
                  - my_network

              backend:
                image: \${ALIYUN_REGISTRY_URL}/\${ALIYUN_NAMESPACE}/backend:latest
                restart: always
                depends_on:
                  - db
                environment:
                  - DATABASE_URL=postgresql+asyncpg://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@db:5432/\${POSTGRES_DB}
                  - ACCESS_SECRET_KEY=\${ACCESS_SECRET_KEY}
                  - RESET_PASSWORD_SECRET_KEY=\${RESET_PASSWORD_SECRET_KEY}
                  - VERIFICATION_SECRET_KEY=\${VERIFICATION_SECRET_KEY}
                  - CORS_ORIGINS=\${CORS_ORIGINS}
                  - AUTO_MIGRATE=true
                networks:
                  - my_network

              frontend:
                image: \${ALIYUN_REGISTRY_URL}/\${ALIYUN_NAMESPACE}/frontend:latest
                restart: always
                environment:
                  - API_BASE_URL=http://backend:8000
                  - NODE_ENV=production
                networks:
                  - my_network

              nginx:
                image: nginx:latest
                restart: always
                ports:
                  - "80:80"
                volumes:
                  - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
                depends_on:
                  - frontend
                  - backend
                networks:
                  - my_network

            volumes:
              postgres_data:

            networks:
              my_network:
                driver: bridge
            EOF
            
            echo "Pulling latest images..."
            docker compose -f docker-compose.prod.yml pull
            
            echo "Starting application with force recreate..."
            docker compose -f docker-compose.prod.yml up -d --force-recreate
            
            echo "Deployment finished!" 