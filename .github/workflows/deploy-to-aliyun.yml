name: Deploy to Aliyun ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name:  checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_REGISTRY_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          file: ./fastapi_backend/Dockerfile
          push: true
          tags: ${{ secrets.ACR_REGISTRY_URL }}/${{ secrets.ACR_NAMESPACE }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./nextjs-frontend
          file: ./nextjs-frontend/Dockerfile
          push: true
          tags: ${{ secrets.ACR_REGISTRY_URL }}/${{ secrets.ACR_NAMESPACE }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Deploy to ECS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_SSH_KEY }}
          script: |
            set -e

            echo "🚀 开始部署..."
            APP_DIR="/app/xiuer"
            mkdir -p $APP_DIR
            cd $APP_DIR

            # --- 1. 创建 Nginx 配置文件 ---
            echo "🔧 创建 nginx.conf..."
            mkdir -p ./nginx
            cat > ./nginx/default.conf << 'EOL'
            server {
                listen 80;
                server_name ${{ secrets.ECS_HOST }};
                location / {
                    proxy_pass http://frontend:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                location /api/ {
                    proxy_pass http://backend:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOL

            # --- 2. 创建 docker-compose.prod.yml ---
            echo "🔧 创建 docker-compose.prod.yml..."
            cat > docker-compose.prod.yml << 'EOL'
            version: '3.8'
            services:
              db:
                image: postgres:17
                restart: always
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                environment:
                  - POSTGRES_USER=${{ secrets.DB_USER }}
                  - POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
                  - POSTGRES_DB=${{ secrets.DB_NAME }}
                networks:
                  - my_network
              backend:
                image: ${{ secrets.ACR_REGISTRY_URL }}/${{ secrets.ACR_NAMESPACE }}/backend:${{ github.sha }}
                restart: always
                depends_on:
                  - db
                environment:
                  - DATABASE_URL=postgresql+asyncpg://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@db:5432/${{ secrets.DB_NAME }}
                  - RESET_PASSWORD_SECRET_KEY=${{ secrets.RESET_PASSWORD_SECRET_KEY }}
                  - VERIFICATION_SECRET_KEY=${{ secrets.VERIFICATION_SECRET_KEY }}
                networks:
                  - my_network
              frontend:
                image: ${{ secrets.ACR_REGISTRY_URL }}/${{ secrets.ACR_NAMESPACE }}/frontend:${{ github.sha }}
                restart: always
                networks:
                  - my_network
              nginx:
                image: nginx:latest
                restart: always
                ports:
                  - "80:80"
                volumes:
                  - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
                depends_on:
                  - frontend
                  - backend
                networks:
                  - my_network
            volumes:
              postgres_data:
            networks:
              my_network:
                driver: bridge
            EOL

            # --- 3. 配置 Docker DNS 并准备环境 ---
            echo "🔧 配置 Docker DNS 以提高网络稳定性..."
            sudo mkdir -p /etc/docker
            sudo bash -c 'cat > /etc/docker/daemon.json <<EOL
{
  "dns": ["223.5.5.5", "8.8.8.8"]
}
EOL'

            echo "🔄 重启 Docker 服务以应用新配置..."
            sudo systemctl restart docker
            sleep 5 # 给 Docker 守护进程一点时间来完全重启

            echo "🌐 测试到 Docker Hub 的网络连接..."
            ping -c 3 registry-1.docker.io || echo "Ping 失败，但部署将继续..."

            echo "🔐 登录阿里云容器仓库..."
            docker login --username "${{ secrets.ACR_USERNAME }}" --password "${{ secrets.ACR_PASSWORD }}" ${{ secrets.ACR_REGISTRY_URL }}

            # --- 4. 串行拉取镜像 (避免内存峰值) ---
            echo "📦 开始拉取最新的 Docker 镜像 (逐个进行)..."
            docker pull postgres:17
            docker pull nginx:latest
            docker pull ${{ secrets.ACR_REGISTRY_URL }}/${{ secrets.ACR_NAMESPACE }}/backend:${{ github.sha }}
            docker pull ${{ secrets.ACR_REGISTRY_URL }}/${{ secrets.ACR_NAMESPACE }}/frontend:${{ github.sha }}
            echo "✅ 所有镜像拉取完成！"

            # --- 5. 启动服务 ---
            echo "🚀 停止旧容器并启动新版本..."
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            docker-compose -f docker-compose.prod.yml up -d

            # --- 6. 清理工作 ---
            echo "🧹 清理未使用的 Docker 镜像..."
            docker image prune -f

            echo "🎉 部署完成！"

      - name: Notify deployment status
        if: always()
        run: echo "Deployment status: ${{ job.status }}"