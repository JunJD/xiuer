"""Add XHS spider tables with tagging system

Revision ID: 66c491833c87
Revises: e7c0fd5d95c2
Create Date: 2025-06-26 00:08:06.644035

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import fastapi_users_db_sqlalchemy
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, Boolean, DateTime, Text


# revision identifiers, used by Alembic.
revision: str = '66c491833c87'
down_revision: Union[str, None] = 'e7c0fd5d95c2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('business_keywords',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('keyword', sa.String(length=100), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('weight', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_business_keywords_keyword'), 'business_keywords', ['keyword'], unique=False)
    op.create_table('xhs_notes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('note_id', sa.String(length=100), nullable=False),
    sa.Column('note_url', sa.String(length=500), nullable=True),
    sa.Column('note_type', sa.String(length=20), nullable=True),
    sa.Column('author_user_id', sa.String(length=100), nullable=True),
    sa.Column('author_nickname', sa.String(length=100), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('desc', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('upload_time', sa.DateTime(), nullable=True),
    sa.Column('ip_location', sa.String(length=100), nullable=True),
    sa.Column('liked_count', sa.Integer(), nullable=True),
    sa.Column('collected_count', sa.Integer(), nullable=True),
    sa.Column('comment_count', sa.Integer(), nullable=True),
    sa.Column('share_count', sa.Integer(), nullable=True),
    sa.Column('video_cover', sa.String(length=500), nullable=True),
    sa.Column('video_addr', sa.String(length=500), nullable=True),
    sa.Column('image_list', sa.JSON(), nullable=True),
    sa.Column('current_tags', sa.JSON(), nullable=True),
    sa.Column('is_new', sa.Boolean(), nullable=True),
    sa.Column('is_changed', sa.Boolean(), nullable=True),
    sa.Column('is_important', sa.Boolean(), nullable=True),
    sa.Column('change_reason', sa.String(length=200), nullable=True),
    sa.Column('important_comment_ids', sa.JSON(), nullable=True),
    sa.Column('first_crawl_time', sa.DateTime(), nullable=False),
    sa.Column('last_crawl_time', sa.DateTime(), nullable=False),
    sa.Column('crawl_count', sa.Integer(), nullable=True),
    sa.Column('previous_stats', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_author_id', 'xhs_notes', ['author_user_id'], unique=False)
    op.create_index('idx_note_crawl_time', 'xhs_notes', ['last_crawl_time'], unique=False)
    op.create_index('idx_note_tags', 'xhs_notes', ['is_new', 'is_changed', 'is_important'], unique=False)
    op.create_index(op.f('ix_xhs_notes_author_user_id'), 'xhs_notes', ['author_user_id'], unique=False)
    op.create_index(op.f('ix_xhs_notes_note_id'), 'xhs_notes', ['note_id'], unique=True)
    op.create_table('crawl_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_name', sa.String(length=200), nullable=False),
    sa.Column('keyword', sa.String(length=200), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='taskstatus'), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('target_count', sa.Integer(), nullable=True),
    sa.Column('sort_type', sa.Integer(), nullable=True),
    sa.Column('cookies', sa.Text(), nullable=True),
    sa.Column('total_crawled', sa.Integer(), nullable=True),
    sa.Column('new_notes', sa.Integer(), nullable=True),
    sa.Column('changed_notes', sa.Integer(), nullable=True),
    sa.Column('important_notes', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('scheduled_time', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_crawl_tasks_keyword'), 'crawl_tasks', ['keyword'], unique=False)
    op.create_table('note_tag_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('note_id', sa.String(length=100), nullable=False),
    sa.Column('old_tags', sa.JSON(), nullable=True),
    sa.Column('new_tags', sa.JSON(), nullable=True),
    sa.Column('change_type', sa.String(length=50), nullable=False),
    sa.Column('change_reason', sa.String(length=200), nullable=True),
    sa.Column('old_stats', sa.JSON(), nullable=True),
    sa.Column('new_stats', sa.JSON(), nullable=True),
    sa.Column('related_comment_ids', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['xhs_notes.note_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_note_tag_logs_note_id'), 'note_tag_logs', ['note_id'], unique=False)
    op.create_table('xhs_comments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('comment_id', sa.String(length=100), nullable=False),
    sa.Column('note_id', sa.String(length=100), nullable=False),
    sa.Column('commenter_user_id', sa.String(length=100), nullable=True),
    sa.Column('commenter_nickname', sa.String(length=100), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('like_count', sa.Integer(), nullable=True),
    sa.Column('upload_time', sa.DateTime(), nullable=True),
    sa.Column('ip_location', sa.String(length=100), nullable=True),
    sa.Column('parent_comment_id', sa.String(length=100), nullable=True),
    sa.Column('root_comment_id', sa.String(length=100), nullable=True),
    sa.Column('contains_business_keywords', sa.Boolean(), nullable=True),
    sa.Column('business_keywords_found', sa.JSON(), nullable=True),
    sa.Column('importance_score', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['xhs_notes.note_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_xhs_comments_comment_id'), 'xhs_comments', ['comment_id'], unique=True)
    op.create_index(op.f('ix_xhs_comments_note_id'), 'xhs_comments', ['note_id'], unique=False)
    op.create_index(op.f('ix_xhs_comments_parent_comment_id'), 'xhs_comments', ['parent_comment_id'], unique=False)
    op.create_index(op.f('ix_xhs_comments_root_comment_id'), 'xhs_comments', ['root_comment_id'], unique=False)
    
    # 初始化业务关键词数据
    _initialize_business_keywords()
    # ### end Alembic commands ###


def _initialize_business_keywords():
    """在迁移时初始化业务关键词数据"""
    from datetime import datetime
    from uuid import uuid4
    
    # 定义业务关键词表结构（用于迁移中的数据插入）
    business_keywords_table = table('business_keywords',
        column('id', sa.UUID()),
        column('keyword', String(100)),
        column('category', String(50)),
        column('weight', Integer),
        column('is_active', Boolean),
        column('description', String(200)),
        column('created_at', DateTime),
        column('updated_at', DateTime)
    )
    
    # 业务关键词数据
    keywords_data = [
        # 家政服务相关
        {"keyword": "家政", "category": "核心业务", "weight": 10, "description": "家政服务核心词"},
        {"keyword": "保洁", "category": "服务类型", "weight": 8, "description": "保洁服务"},
        {"keyword": "月嫂", "category": "服务类型", "weight": 8, "description": "月嫂服务"},
        {"keyword": "育儿嫂", "category": "服务类型", "weight": 8, "description": "育儿嫂服务"},
        {"keyword": "护工", "category": "服务类型", "weight": 7, "description": "护工服务"},
        {"keyword": "钟点工", "category": "服务类型", "weight": 6, "description": "钟点工服务"},
        {"keyword": "搬家", "category": "服务类型", "weight": 6, "description": "搬家服务"},
        {"keyword": "家庭清洁", "category": "服务类型", "weight": 7, "description": "家庭清洁服务"},
        
        # 服务质量相关
        {"keyword": "专业", "category": "质量评价", "weight": 5, "description": "专业程度"},
        {"keyword": "负责", "category": "质量评价", "weight": 5, "description": "负责任"},
        {"keyword": "推荐", "category": "质量评价", "weight": 6, "description": "推荐服务"},
        {"keyword": "满意", "category": "质量评价", "weight": 5, "description": "满意服务"},
        {"keyword": "靠谱", "category": "质量评价", "weight": 6, "description": "服务靠谱"},
        
        # 联系方式相关
        {"keyword": "电话", "category": "联系方式", "weight": 7, "description": "联系电话"},
        {"keyword": "微信", "category": "联系方式", "weight": 7, "description": "微信联系"},
        {"keyword": "联系", "category": "联系方式", "weight": 6, "description": "联系方式"},
        {"keyword": "预约", "category": "联系方式", "weight": 6, "description": "预约服务"},
        
        # 地区相关 - 合肥及周边
        {"keyword": "合肥", "category": "地区", "weight": 8, "description": "合肥地区"},
        {"keyword": "蜀山区", "category": "地区", "weight": 6, "description": "蜀山区"},
        {"keyword": "庐阳区", "category": "地区", "weight": 6, "description": "庐阳区"},
        {"keyword": "瑶海区", "category": "地区", "weight": 6, "description": "瑶海区"},
        {"keyword": "包河区", "category": "地区", "weight": 6, "description": "包河区"},

    ]
    
    # 准备插入数据
    now = datetime.utcnow()
    insert_data = []
    
    for kw in keywords_data:
        insert_data.append({
            'id': uuid4(),
            'keyword': kw['keyword'],
            'category': kw['category'],
            'weight': kw['weight'],
            'is_active': True,
            'description': kw['description'],
            'created_at': now,
            'updated_at': now
        })
    
    # 批量插入数据
    op.bulk_insert(business_keywords_table, insert_data)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_xhs_comments_root_comment_id'), table_name='xhs_comments')
    op.drop_index(op.f('ix_xhs_comments_parent_comment_id'), table_name='xhs_comments')
    op.drop_index(op.f('ix_xhs_comments_note_id'), table_name='xhs_comments')
    op.drop_index(op.f('ix_xhs_comments_comment_id'), table_name='xhs_comments')
    op.drop_table('xhs_comments')
    op.drop_index(op.f('ix_note_tag_logs_note_id'), table_name='note_tag_logs')
    op.drop_table('note_tag_logs')
    op.drop_index(op.f('ix_crawl_tasks_keyword'), table_name='crawl_tasks')
    op.drop_table('crawl_tasks')
    op.drop_index(op.f('ix_xhs_notes_note_id'), table_name='xhs_notes')
    op.drop_index(op.f('ix_xhs_notes_author_user_id'), table_name='xhs_notes')
    op.drop_index('idx_note_tags', table_name='xhs_notes')
    op.drop_index('idx_note_crawl_time', table_name='xhs_notes')
    op.drop_index('idx_author_id', table_name='xhs_notes')
    op.drop_table('xhs_notes')
    op.drop_index(op.f('ix_business_keywords_keyword'), table_name='business_keywords')
    op.drop_table('business_keywords')
    # ### end Alembic commands ###
