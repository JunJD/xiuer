---
description: 
globs: 
alwaysApply: false
---
---
description: Backend service layer code examples and best practices
globs: fastapi_backend/app/services/**/*.py, fastapi_backend/app/core/**/*.py
---

# 后端服务层代码示例

这是后端服务层的代码示例和最佳实践。

## 服务层基础结构

::code-block{language="python" title="基础服务类结构"}
```python
from __future__ import annotations

from typing import Optional, List
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from app.models import XhsNote
from app.schemas.note import NoteCreate, NoteUpdate
from app.core.logger import app_logger as logger


class BaseService:
    """基础服务类，提供通用的数据库操作方法"""
    
    def __init__(self, db: AsyncSession) -> None:
        self.db = db

    async def commit(self) -> None:
        """提交事务"""
        await self.db.commit()

    async def rollback(self) -> None:
        """回滚事务"""
        await self.db.rollback()

    async def refresh(self, instance) -> None:
        """刷新实例"""
        await self.db.refresh(instance)
```
::

## 笔记服务实现

::code-block{language="python" title="笔记服务层完整实现"}
```python
class NoteService(BaseService):
    """小红书笔记服务层"""

    async def create_note(
        self, 
        note_data: NoteCreate, 
        user_id: int
    ) -> XhsNote:
        """创建新笔记"""
        try:
            note = XhsNote(
                **note_data.model_dump(),
                user_id=user_id,
                created_at=datetime.utcnow()
            )
            self.db.add(note)
            await self.commit()
            await self.refresh(note)
            
            logger.info(
                "Created note successfully",
                extra={
                    "note_id": note.note_id,
                    "user_id": user_id,
                    "title": note.title[:50]  # 只记录前50个字符
                }
            )
            return note
            
        except Exception as e:
            await self.rollback()
            logger.error(
                "Failed to create note",
                extra={
                    "user_id": user_id,
                    "error": str(e)
                },
                exc_info=True
            )
            raise

    async def get_note_by_id(self, note_id: str) -> Optional[XhsNote]:
        """根据ID获取笔记"""
        stmt = select(XhsNote).where(XhsNote.note_id == note_id)
        result = await self.db.execute(stmt)
        return result.scalar_one_or_none()

    async def get_notes_paginated(
        self,
        page: int = 1,
        limit: int = 20,
        tag: Optional[str] = None,
        user_id: Optional[int] = None
    ) -> tuple[List[XhsNote], int]:
        """获取分页笔记列表"""
        # 构建查询条件
        stmt = select(XhsNote)
        
        if tag:
            stmt = stmt.where(XhsNote.tags.contains([tag]))
        if user_id:
            stmt = stmt.where(XhsNote.user_id == user_id)
        
        # 获取总数
        count_stmt = select(func.count()).select_from(stmt.subquery())
        total_result = await self.db.execute(count_stmt)
        total = total_result.scalar()
        
        # 分页查询
        offset = (page - 1) * limit
        stmt = stmt.offset(offset).limit(limit).order_by(XhsNote.created_at.desc())
        
        result = await self.db.execute(stmt)
        notes = result.scalars().all()
        
        return list(notes), total

    async def update_note(
        self,
        note_id: str,
        note_data: NoteUpdate,
        user_id: int
    ) -> Optional[XhsNote]:
        """更新笔记"""
        note = await self.get_note_by_id(note_id)
        if not note or note.user_id != user_id:
            return None
            
        # 更新字段
        update_data = note_data.model_dump(exclude_unset=True)
        for field, value in update_data.items():
            setattr(note, field, value)
        
        note.updated_at = datetime.utcnow()
        
        try:
            await self.commit()
            await self.refresh(note)
            
            logger.info(
                "Updated note successfully",
                extra={
                    "note_id": note_id,
                    "user_id": user_id,
                    "updated_fields": list(update_data.keys())
                }
            )
            return note
            
        except Exception as e:
            await self.rollback()
            logger.error(
                "Failed to update note",
                extra={
                    "note_id": note_id,
                    "user_id": user_id,
                    "error": str(e)
                },
                exc_info=True
            )
            raise

    async def delete_note(self, note_id: str, user_id: int) -> bool:
        """删除笔记"""
        note = await self.get_note_by_id(note_id)
        if not note or note.user_id != user_id:
            return False
            
        try:
            await self.db.delete(note)
            await self.commit()
            
            logger.info(
                "Deleted note successfully",
                extra={
                    "note_id": note_id,
                    "user_id": user_id
                }
            )
            return True
            
        except Exception as e:
            await self.rollback()
            logger.error(
                "Failed to delete note",
                extra={
                    "note_id": note_id,
                    "user_id": user_id,
                    "error": str(e)
                },
                exc_info=True
            )
            raise
```
::

## 依赖注入模式

::code-block{language="python" title="FastAPI 依赖注入"}
```python
from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_db_session
from app.services.note_service import NoteService


async def get_note_service(
    db: AsyncSession = Depends(get_db_session)
) -> NoteService:
    """获取笔记服务实例"""
    return NoteService(db)


# 在路由中使用
@router.post("/notes", response_model=NoteResponse)
async def create_note(
    note_data: NoteCreate,
    current_user: User = Depends(get_current_user),
    note_service: NoteService = Depends(get_note_service)
):
    """创建笔记端点"""
    note = await note_service.create_note(note_data, current_user.id)
    return note
```
::

## 错误处理最佳实践

::alert{type="warning"}
服务层错误处理原则：

1. **事务管理**: 在出现异常时自动回滚事务
2. **日志记录**: 记录详细的错误信息和上下文
3. **异常传播**: 让路由层处理具体的HTTP状态码
4. **敏感信息**: 避免在日志中记录密码、token等敏感数据
::

::code-block{language="python" title="错误处理示例"}
```python
async def create_note_with_validation(
    self,
    note_data: NoteCreate,
    user_id: int
) -> XhsNote:
    """创建笔记（包含业务验证）"""
    # 业务验证
    if len(note_data.title.strip()) == 0:
        raise ValueError("笔记标题不能为空")
    
    # 检查重复
    existing = await self.get_note_by_title(note_data.title, user_id)
    if existing:
        raise ValueError("已存在相同标题的笔记")
    
    try:
        return await self.create_note(note_data, user_id)
    except IntegrityError as e:
        logger.error(
            "Database integrity error",
            extra={
                "error": str(e),
                "user_id": user_id,
                "title": note_data.title
            }
        )
        raise ValueError("数据完整性错误，请检查输入数据")
    except Exception as e:
        logger.error(
            "Unexpected error creating note",
            extra={
                "error": str(e),
                "user_id": user_id
            },
            exc_info=True
        )
        raise
```
::

## 性能优化技巧

::alert{type="success"}
服务层性能优化建议：

1. **批量操作**: 使用 `bulk_insert_mappings()` 进行批量插入
2. **查询优化**: 使用 `joinedload()` 预加载关联数据
3. **缓存策略**: 对热点数据实施缓存
4. **连接池**: 合理配置数据库连接池参数
::

::code-block{language="python" title="批量操作示例"}
```python
async def create_notes_batch(
    self,
    notes_data: List[NoteCreate],
    user_id: int
) -> List[XhsNote]:
    """批量创建笔记"""
    try:
        # 准备数据
        notes_dict = [
            {
                **note_data.model_dump(),
                "user_id": user_id,
                "created_at": datetime.utcnow()
            }
            for note_data in notes_data
        ]
        
        # 批量插入
        await self.db.execute(
            insert(XhsNote).values(notes_dict)
        )
        await self.commit()
        
        logger.info(
            "Batch created notes",
            extra={
                "count": len(notes_data),
                "user_id": user_id
            }
        )
        
        # 返回创建的笔记
        stmt = select(XhsNote).where(
            XhsNote.user_id == user_id,
            XhsNote.created_at >= datetime.utcnow() - timedelta(seconds=10)
        ).order_by(XhsNote.created_at.desc()).limit(len(notes_data))
        
        result = await self.db.execute(stmt)
        return list(result.scalars().all())
        
    except Exception as e:
        await self.rollback()
        logger.error(
            "Failed to batch create notes",
            extra={
                "count": len(notes_data),
                "user_id": user_id,
                "error": str(e)
            },
            exc_info=True
        )
        raise
```
::
